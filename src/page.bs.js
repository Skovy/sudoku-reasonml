// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array                      = require("bs-platform/lib/js/array.js");
var Block                        = require("bs-platform/lib/js/block.js");
var Curry                        = require("bs-platform/lib/js/curry.js");
var React                        = require("react");
var Js_exn                       = require("bs-platform/lib/js/js_exn.js");
var Hashtbl                      = require("bs-platform/lib/js/hashtbl.js");
var Caml_array                   = require("bs-platform/lib/js/caml_array.js");
var Caml_format                  = require("bs-platform/lib/js/caml_format.js");
var ReasonReact                  = require("reason-react/src/ReasonReact.js");
var Board$ReactTemplate          = require("./Board.bs.js");
var Caml_builtin_exceptions      = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var StartingBoards$ReactTemplate = require("./StartingBoards.bs.js");

var component = ReasonReact.reducerComponent("Page");

var style = {
  display: "flex",
  height: "100%",
  alignItems: "center",
  justifyContent: "center"
};

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var handleChange = function (value, row, column) {
        return Curry._1(self[/* send */4], /* Change */[
                    value,
                    row,
                    column
                  ]);
      };
      return React.createElement("div", {
                  style: style
                }, ReasonReact.element(/* None */0, /* None */0, Board$ReactTemplate.make(self[/* state */2][/* board */0], handleChange, /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* board */StartingBoards$ReactTemplate.generateInitialBoard(Hashtbl.find(StartingBoards$ReactTemplate.boards, "(1) Easy"))];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      var column = action[2];
      var row = action[1];
      var newBoard = $$Array.copy(state[/* board */0]);
      var newRow = $$Array.copy(Caml_array.caml_array_get(newBoard, row));
      Caml_array.caml_array_set(newBoard, row, newRow);
      var exit = 0;
      var intValue;
      try {
        intValue = Caml_format.caml_int_of_string(action[0]);
        exit = 1;
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          if (exn[1] === "int_of_string") {
            Caml_array.caml_array_set(newRow, column, 0);
            return /* Update */Block.__(0, [/* record */[/* board */newBoard]]);
          } else {
            throw exn;
          }
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        if (intValue < 1 || intValue > 9) {
          return /* NoUpdate */0;
        } else {
          Caml_array.caml_array_set(newRow, column, intValue);
          return /* Update */Block.__(0, [/* record */[/* board */newBoard]]);
        }
      }
      
    });
  return newrecord;
}

exports.component = component;
exports.style     = style;
exports.make      = make;
/* component Not a pure module */
